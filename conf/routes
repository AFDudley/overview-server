# Routes
# This file defines all application routes (Higher priority routes first).
# They're grouped by controller.

GET    / controllers.WelcomeController.show()

GET    /help controllers.HelpController.show()

GET    /login  controllers.SessionController.new_()
POST   /login  controllers.SessionController.create()
GET    /logout controllers.SessionController.delete()

GET    /confirm/prompt/:email controllers.ConfirmationController.index(email)
GET    /confirm/:token        controllers.ConfirmationController.show(token)

GET    /register controllers.UserController.new_()
POST   /register controllers.UserController.create()

GET    /reset-password        controllers.PasswordController.new_()
POST   /reset-password        controllers.PasswordController.create()
GET    /reset-password/:token controllers.PasswordController.edit(token)
POST   /reset-password/:token controllers.PasswordController.update(token)

DELETE /tour controllers.TourController.delete()

GET    /documents/:id.json             controllers.DocumentController.showJson(id: Long)
GET    /documents/:id.txt              controllers.DocumentController.showText(id: Long)
GET    /documents/:id                  controllers.DocumentController.show(id: Long)
GET    /documents/:id/contents/:fileId controllers.DocumentController.contents(id: Long, fileId: Long)

HEAD   /uploads/:uuid        controllers.UploadController.show(uuid: java.util.UUID)
POST   /uploads/:uuid        controllers.UploadController.create(uuid: java.util.UUID)
POST   /uploads/:uuid/finish controllers.UploadController.startClustering(uuid: java.util.UUID)

POST   /files/finish  controllers.MassUploadController.startClustering()
HEAD   /files/:guid   controllers.MassUploadController.show(guid: java.util.UUID)
POST   /files/:guid   controllers.MassUploadController.create(guid: java.util.UUID)
DELETE /files         controllers.MassUploadController.cancelUpload()

GET    /imports.json controllers.ImportJobController.index()

GET    /imports/csv                        controllers.CsvUploadController.new_()
GET    /imports/file                        controllers.FileImportController.new_()
GET    /imports/documentcloud-project      controllers.DocumentCloudProjectController.index()
POST   /imports/documentcloud              controllers.DocumentCloudImportJobController.create()
GET    /imports/documentcloud/new/:query   controllers.DocumentCloudImportJobController.new_(query: String)
POST   /imports/clone/:sourceDocumentSetId controllers.CloneImportJobController.create(sourceDocumentSetId: Long)

DELETE /trees/jobs/:jobId controllers.ReclusterJobController.delete(jobId: Long)

# Routes that relate to a DocumentSet
GET    /documentsets                      controllers.DocumentSetController.index(page: Int ?= 1)
GET    /documentsets/:id.html.json        controllers.DocumentSetController.showHtmlInJson(id: Long)
GET    /documentsets/:id.json             controllers.DocumentSetController.showJson(id: Long)
GET    /documentsets/:id                  controllers.DocumentSetController.show(id: Long)
# URLs like "/documentsets/123/job-456"
GET    /documentsets/:id/$jsParams<[a-zA-Z]+-[0-9]+> controllers.DocumentSetController.showWithJsParams(id: Long, jsParams: String)
DELETE /documentsets/:id                  controllers.DocumentSetController.delete(id: Long)
PUT    /documentsets/:id                  controllers.DocumentSetController.update(id: Long)

GET    /documentsets/:id/api-tokens        controllers.ApiTokenController.index(id: Long)
POST   /documentsets/:id/api-tokens        controllers.ApiTokenController.create(id: Long)
DELETE /documentsets/:id/api-tokens/:token controllers.ApiTokenController.destroy(id: Long, token: String)

GET    /documentsets/:id/users.json   controllers.DocumentSetUserController.indexJson(id: Long)
POST   /documentsets/:id/users        controllers.DocumentSetUserController.create(id: Long)
DELETE /documentsets/:id/users/:email controllers.DocumentSetUserController.delete(id: Long, email: String)

GET    /documentsets/:id/documents controllers.DocumentListController.index(id: Long, nodes: String ?= "", tags: String ?= "", documents: String ?= "", searchResults: String ?= "", pageSize: Int ?= 20, page: Int ?= 1)

GET    /documentsets/:id/export                                              controllers.DocumentSetExportController.index(id: Long)
GET    /documentsets/:id/export/documents-with-string-tags/:format/*filename controllers.DocumentSetExportController.documentsWithStringTags(format: models.export.format.Format, filename: String, id: Long)
GET    /documentsets/:id/export/documents-with-column-tags/:format/*filename controllers.DocumentSetExportController.documentsWithColumnTags(format: models.export.format.Format, filename: String, id: Long)

GET    /documentsets/:documentSetId/vizs controllers.VizController.indexJson(documentSetId: Long)

POST   /documentsets/:id/trees           controllers.TreeController.create(id: Long)
GET    /trees/:treeId/nodes.json         controllers.NodeController.index(treeId: Long)
GET    /trees/:treeId/nodes/:nodeId.json controllers.NodeController.show(treeId: Long, nodeId: Long)
POST   /trees/:treeId/nodes/:nodeId      controllers.NodeController.update(treeId: Long, nodeId: Long)

PUT    /documentsets/:id/tags/:tagId             controllers.TagController.update(id: Long, tagId: Long)
DELETE /documentsets/:id/tags/:tagId             controllers.TagController.delete(id: Long, tagId: Long)
GET    /documentsets/:id/tags.csv                controllers.TagController.indexCsv(id: Long)
GET    /documentsets/:id/tags                    controllers.TagController.indexJson(id: Long)
GET    /documentsets/:id/trees/:treeId/tags      controllers.TagController.indexJsonWithTree(id: Long, treeId: Long)
POST   /documentsets/:id/tags                    controllers.TagController.create(id: Long)
POST   /documentsets/:id/tags/:tagId/add         controllers.TagController.add(id: Long, tagId: Long)
POST   /documentsets/:id/tags/:tagId/remove      controllers.TagController.remove(id: Long, tagId: Long)

# We POST the "nodes" parameter here because it can be large; but conceptually this is GET.
POST   /documentsets/:id/node-counts/tags/:tagId              controllers.TagController.nodeCounts(id: Long, tagId: Long)
POST   /documentsets/:id/node-counts/untagged                 controllers.UntaggedDocumentsController.nodeCounts(id: Long)
POST   /documentsets/:id/node-counts/searches/:searchResultId controllers.SearchResultController.nodeCounts(id: Long, searchResultId: Long)

POST   /documentsets/:id/searches controllers.SearchController.create(id: Long)
GET    /documentsets/:id/searches controllers.SearchResultController.index(id: Long)

GET    /documentsets/:id/error-list controllers.DocumentProcessingErrorController.index(id: Long)

GET    /public-document-sets controllers.PublicDocumentSetController.index()
GET    /shared-document-sets controllers.SharedDocumentSetController.index()

# Admin section
GET    /admin/users        controllers.admin.UserController.index()
POST   /admin/users        controllers.admin.UserController.create()
GET    /admin/users.json   controllers.admin.UserController.indexJson(page: Int ?= 1)
PUT    /admin/users/:email controllers.admin.UserController.update(email: String)
DELETE /admin/users/:email controllers.admin.UserController.delete(email: String)

GET    /admin/imports        controllers.admin.ImportJobController.index()
DELETE /admin/imports/:jobId controllers.admin.ImportJobController.delete(jobId: Long)

# API V1
#
# Each is documented at https://github.com/overview/overview-server/wiki/API-v1
GET    /api/v1/document-sets/:id/tags      controllers.api.TagController.index(id: Long)

GET    /api/v1/document-sets/:id/saved-searches        controllers.api.SavedSearchController.index(id: Long)
POST   /api/v1/document-sets/:id/saved-searches        controllers.api.SavedSearchController.create(id: Long)
GET    /api/v1/document-sets/:id/saved-searches/:query controllers.api.SavedSearchController.show(id: Long, query: String)
DELETE /api/v1/document-sets/:id/saved-searches/:query controllers.api.SavedSearchController.destroy(id: Long, query: String)
GET    /api/v1/document-sets/:id/saved-searches/:query/documents controllers.api.SavedSearchDocumentController.index(id: Long, query: String)

GET /api/v1/vizs/:id controllers.api.VizController.show(id: Long)
PUT /api/v1/vizs/:id controllers.api.VizController.update(id: Long)

GET /api/v1/document-sets/:docsetId/documents     controllers.api.DocumentController.index(docsetId: Long, q: String ?= "", fields: String ?= "")
GET /api/v1/document-sets/:docsetId/documents/:id controllers.api.DocumentController.show(docsetId: Long, id: Long)

GET    /api/v1/vizs/:vizId/objects     controllers.api.VizObjectController.index(vizId: Long)
POST   /api/v1/vizs/:vizId/objects     controllers.api.VizObjectController.create(vizId: Long)
GET    /api/v1/vizs/:vizId/objects/:id controllers.api.VizObjectController.show(vizId: Long, id: Long)
PUT    /api/v1/vizs/:vizId/objects/:id controllers.api.VizObjectController.update(vizId: Long, id: Long)
DELETE /api/v1/vizs/:vizId/objects/:id controllers.api.VizObjectController.destroy(vizId: Long, id: Long)
DELETE /api/v1/vizs/:vizId/objects     controllers.api.VizObjectController.destroyMany(vizId: Long)

POST   /api/v1/vizs/:vizId/document-objects controllers.api.DocumentVizObjectController.create(vizId: Long)
DELETE /api/v1/vizs/:vizId/document-objects controllers.api.DocumentVizObjectController.destroy(vizId: Long)

# Map static resources from the /public folder to the /assets URL path
GET    /$file<robots\.txt>      controllers.Assets.at(path="/public", file)
GET    /assets/*file            controllers.Assets.at(path="/public", file)
