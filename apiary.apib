FORMAT: 1A
HOST: https://www.overviewproject.org

# The Overview Project

The Overview Project API lets you manipulate document sets and related objects from
https://www.overviewproject.org.

## Authentication

You'll need three special pieces of information to access all endpoints:

* Your **Document Set ID**. This points to a set of documents.
* Your **Viz ID**. This points to your app's private scratchpad.
* Your **API Token**. This is a password.

Got all that? Great. Now, for every request, add an `Authorization` header of `Basic {base64Encode(apiToken + ":x-auth-token")}`.

## HTTPS

We do not support HTTP. Use nothing but HTTPS.

## Pagination

Some API requests will yield "paginated" results, meaning you're not allowed to fetch everything at once.

You can add `offset` and `limit` parameters to the query string to specify which records you'd like. (Overview will impose a maximum limit.)

Overview will return a JavaScript object that looks like this:

    {
        "pagination": {
            "offset": 150,
            "limit": 50,
            "total": 234
        },
        "items": [
            ...
        ]
    }

Here's what it means.

Let's say Overview is holding 234 (`total`) documents. You've requested a maximum (`limit`) of 50 documents per request.
Overview is picturing all 234 documents, sorted according to some criteria, but it is only giving you documents 150 (`offset`) to 200 (`offset + limit`).
If you want to read more documents, you'll have to make another request -- for instance, one with `?offset=200&limit=50` in the query string.

# Group Document Sets
A **Document Set** is a collection of documents.

We currently do not support any methods that read or write Document Set data.

# Group Tags
A **Tag** is a label that can apply to documents.

## Tags Collection [/document-sets/{documentSetId}/tags]

+ Parameters
    + documentSetId (number,required,`1`) ... The DocumentSet ID.

### List all Tags [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "name": "foo", "color": "#abcdef"
        }, {
          "id": 2, "name": "bar", "color": "#123456"
        }]

# Group Documents
A **Document** is a unit of text. It may represent anything: a tweet, a Word file, an Excel spreadsheet, a PDF, an email, a page of text, or whatever your imagination can bring.

A Document's `text` is its essence, but other data which comes in handy.

## Document [/document-sets/{documentSetId}/documents/{id}]
A single Document object, with all metadata and text.

The Document resource has the following attributes:


- id: Overview's way of identifying the document
- url: where to find the document on the Web (or your intranet)
- suppliedId: a String you use to identify the document when you aren't using Overview
- title: what to call the document in Overview's document list
- page: if this document represents one page, the page number; `null` otherwise
- keywords: An Array of Strings that Overview finds interesting about this document (as compared to the other documents in the document set)

+ Parameters
    + documentSetId (required, number, `1`) ... The Document Set ID.
    + id (required, number, `2`) ... The Document ID.
    
+ Model (application/json)

        {
            "id": 2,
            "url": "http://example.org/foo/bar.txt",
            "suppliedId": "foo/bar",
            "title": "Foo Bar",
            "keywords": [ "foo", "bar" ],
            "text": "foo. bar. foo foo bar bar...."
        }
        
### Retrieve a Document [GET]
+ Response 200

    [Document][]

## Documents Collection [/document-sets/{documentSetId}/documents?q={q}&fields={fields}&offset={offset}&limit={limit}]
Collection of Documents.

Document collections can be rather large, so the `text` column doesn't appear in lists.

+ Parameters
    + documentSetId (required, number, `1`) ... The document set ID.
    + q (optional, string, `bar`) ... An [ElasticSearch query string](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax) to filter documents.
    + fields (optional, string, `id`) ... If `id`, return just an Array of Document IDs instead of an Array of Document JSON objects.
    + offset (optional, number, `0`) ... We're paginating; skip this many documents in the result list.
    + limit (optional, number, `1000`) ... We're paginating; return at most this many documents.

+ Model (application/json)

        {
            "pagination": {
                "offset": 0,
                "limit": 1000,
                "total": 2
            },
            "items": [
                {
                    "id": 2,
                    "url": "http://example.org/foo/bar.txt",
                    "suppliedId": "foo/bar",
                    "title": "Foo Bar",
                    "keywords": [ "foo", "bar" ]
                },
                {
                    "id": 3,
                    "url": "http://example.org/bar/baz.txt",
                    "suppliedId": "bar/baz",
                    "title": "Bar Baz",
                    "keywords": [ "bar", "baz" ]
                }
            ]
        }

### List all Documents [GET]

+ Response 200

    [Documents Collection][]

# Group Vizs
A **Viz** is a program that lets a user interact with a single Document Set.

In other words: *your program* is a Viz. This API lets you store information about it.

A Viz's `title` is visible on the Overview Project website. A Viz's `json` is private: only the Viz
itself may choose to display it somewhere.

## Viz [/vizs/{id}]
A single Viz object with all its details.

The Viz resource has the following attributes:

- id: The ID of this Viz, unique among all Vizs
- url: The URL of this Viz. Overview may link to and fetch from sub-URLs
- apiToken: The API token this Viz is using. This is a secret; presumably the Viz already knows it
- title: The title of the Viz. Overview will display this title to users
- createdAt: The time the Viz was created
- json: Arbitrary JSON: the Viz's scratchpad

+ Parameters
    + id (required, number, `1`) ... The Viz ID.

+ Model (application/json)

        {
          "id": 1,
          "url": "http://my-viz-site.com",
          "apiToken": "my-viz-api-token",
          "title": "My Viz Title",
          "createdAt": "2014-08-19T15:50:43.334Z",
          "json": { "foo": "bar" }
        }

### Retrieve a Viz [GET]
+ Response 200

    [Viz][]

### Edit a Viz [PUT]
+ Request (application/json)

        {
          "title": "My Viz Title",
          "json": { "foo": "bar" }
        }

+ Response 200

    [Viz][]

# Group VizObjects
A **VizObject** is something your Viz stores.

Think of a VizObject like a tag. Each VizObject has some metadata (e.g., a title), and it can be linked zero, one or many Documents.

This description is intentionally vague. VizObjects won't handle everybody's needs, but they
should cover a broad set of applications, and they're reasonably efficient.

## VizObject [/vizs/{vizId}/objects/{id}]

+ Parameters
    + vizId (required, number, `1`) ... The *Viz* ID.
    + id (required, number, `2`) ... The *VizObject* ID.

+ Model (application/json)

        {
            "id": 2,
            "indexedLong": 4,
            "indexedString": null,
            "json": { "foo": 4 }
        }

### Retrieve a VizObject [GET]

+ Response 200

    [VizObject][]

### Edit a VizObject [PUT]
You need only provide a JSON Object with a `json` property to update a VizObject.

If you plan on creating hundreds or more VizObjects, you'll probably want a way to search
them. You can pass an `indexedLong` and/or `indexedString` property to help.

+ Request (application/json)

        {
            "indexedLong": 4,
            "indexedString": null,
            "json": { "foo": 4 }
        }

+ Response 200

    [VizObject][]

### Delete a VizObject [DELETE]

+ Response 204

## VizObjects Collection [/vizs/{vizId}/objects]
Collection of all VizObjects.

+ Parameters
    + vizId (required, number, `1`) ... The *Viz* ID.

+ Model (application/json)

        [
          { "id": 1, "indexedLong": null, "indexedString": "foo", "json": { "foo": "bar" } },
          { "id": 2, "indexedLong": 4, "indexedString": null, "json": {} }
        ]

### List all VizObjects [GET]

+ Response 200

    [VizObjects Collection][]

### Create a VizObject [POST]
You need only provide a JSON Object with a `json` property to create a VizObject.

If you plan on creating hundreds or more VizObjects, you'll probably want a way to search
them. You can pass an `indexedLong` and/or `indexedString` property to help.

+ Request (application/json)

        {
            "indexedLong": 4,
            "json": { "foo": 4 }
        }

+ Response 200

    [VizObject][]
